import logging
import re

import requests

from asyncio import sleep

from datetime import timedelta, datetime
from textwrap import dedent

from asgiref.sync import sync_to_async
from django.template import Template, Context

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (ApplicationBuilder, ContextTypes,
                          CommandHandler, MessageHandler, CallbackQueryHandler, PreCheckoutQueryHandler,
                          filters)

from django.conf import settings
from django.core.management.base import BaseCommand
from django.db.models import Count
from django.utils import timezone

from user.models import User

logger = logging.getLogger('tbot')


class Command(BaseCommand):
    def handle(self, *args, **options):
        main()


class TelegramLogsHandler(logging.Handler):

    def __init__(self, tg_token, chat_id):
        super().__init__()
        self.chat_id = chat_id
        self.token = tg_token

    def emit(self, record):
        log_entry = self.format(record)
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': log_entry,
        }
        requests.post(url=url, data=data)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    with open('bot_parts/messages/greeting.html') as file:
        template = Template(file.read())
    chat_id = update.effective_chat.id
    if context.user_data.get('user'):
        return await welcome_letter(update, context)
    user, _ = await User.objects.aget_or_create(
        chat_id=chat_id,
        defaults={
            'username': update.effective_chat.username
        }
    )
    context.user_data['user'] = user
    text = dedent(f"""
        –ü—Ä–∏–≤–µ—Ç ‚ú®
        –≠—Ç–æ –±–æ—Ç —Å—Ç—É–¥–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ <b>Speaky</b>
        –ù–∞–∂–º–∏ /start , —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
    """)
    await context.bot.send_message(
        chat_id,
        text=text,
        parse_mode='HTML',
    )
    await context.bot.delete_message(
        chat_id=chat_id,
        message_id=update.effective_message.message_id
    )
    return 'START'


async def welcome_letter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [
        [InlineKeyboardButton("–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±", callback_data='speak_club')],
        [InlineKeyboardButton("–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è",
                              callback_data='group_lessons')],
        [InlineKeyboardButton("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è",
                              callback_data='personal_lessons')],
    ]
    text = dedent(f"""
        –ü—Ä–∏–≤–µ—Ç, @{context.user_data['user'].username}

        –Ø –î–∞—Ä—å—è, –æ–¥–Ω–∞ –∏–∑ 5% –ª—É—á—à–∏—Ö —É—á–∏—Ç–µ–ª–µ–π –º–∏—Ä–∞ –∏ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å Speaky Studio. –ú—ã —Å –∫–æ–º–∞–Ω–¥–æ–π –∑–Ω–∞–µ–º, –∫–∞–∫ —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–µ–π —Ü–µ–ª–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å üòâ

        –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –Ω–∏–∂–µ:

        üî∏ <b>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±</b>, –≥–¥–µ —Ç—ã –ø—Ä–æ–∫–∞—á–∞–µ—à—å —Å–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, \
            –∏–∑–±–∞–≤–∏—à—å—Å—è –æ—Ç —è–∑—ã–∫–æ–≤–æ–≥–æ –±–∞—Ä—å–µ—Ä–∞, –±–æ–ª—Ç–∞—è –Ω–∞ —Å–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ —Ç–µ–º—ã —Å @dasha.speaky
            –æ—Ç 3000—Ä—É–±/–º–µ—Å

        üî∏ <b>–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è</b>, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–±—Ä–∞—Ç—å –±–∞–∑—É, —Ä–∞–∑–ª–æ–∂–∏—Ç—å –∑–Ω–∞–Ω–∏—è –ø–æ –ø–æ–ª–æ—á–∫–∞–º, \
            –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞—á–∞—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏–∑ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã
            –æ—Ç 500—Ä—É–±/–∑–∞–Ω—è—Ç–∏–µ

        üî∏ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</b>, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã—Ç—å –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å, \
            –¥–∞–∂–µ —Å–∞–º—ã–π —É–∑–∫–∏–π, –∑–∞–Ω–∏–º–∞—è—Å—å –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –Ω—É–∂–¥—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∏–∑ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã
            –æ—Ç 1500—Ä—É–±/–∑–∞–Ω—è—Ç–∏–µ
    """)
    await context.bot.send_message(
        chat_id,
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    await context.bot.delete_message(
        chat_id=chat_id,
        message_id=update.effective_message.message_id
    )
    return 'WELCOME_CHOICE'


async def handle_welcome_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return 'WELCOME_CHOICE'
    if update.callback_query.data == 'speak_club':
        return await speak_club_start(update, context)
    elif update.callback_query.data == 'group_lessons':
        return await group_club_start(update, context)
    else:
        return await personal_lessons_start(update, context)


async def speak_club_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text_1 = dedent("""
        ‚≠ê <b>–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π –∫–ª—É–±</b> –ø–æ–º–æ–∂–µ—Ç:

        üí°–≥–æ–≤–æ—Ä–∏—Ç—å –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞
        üí°–≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞–Ω–∏—è –∏–∑ –ø–∞—Å—Å–∏–≤–∞ –≤ –∞–∫—Ç–∏–≤
        üí°–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∂–∏–≤–æ–π –ª–µ–∫—Å–∏–∫–æ–π
        üí°–∑–≤—É—á–∞—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–µ–µ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ
        üí°–Ω–µ —Ä–∞—Å—Ç–µ—Ä—è—Ç—å —É—Ä–æ–≤–µ–Ω—å, –∞ –Ω–∞—Ä–∞—Å—Ç–∏—Ç—å

        <b>–§–æ—Ä–º–∞—Ç –∏ —Ü–µ–Ω–∞</b>
        –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞—Ö
        –≤—Å—Ç—Ä–µ—á–∏ –≤ Zoom –ø–æ 60 –º–∏–Ω—É—Ç
        —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ 1000—Ä—É–±, –æ–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü

        üéÅ <b>–¢–æ–ª—å–∫–æ –≤ —Å–µ–Ω—Ç—è–±—Ä–µ: 3000—Ä—É–±/–º–µ—Å—è—Ü</b>
        *—Å–∫–∏–¥–∫–∞ 1000—Ä—É–± —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö, –≤—Å—Ç—É–ø–∏–≤—à–∏—Ö –≤ —Å–µ–Ω—Ç—è–±—Ä–µ –∏ –∑–∞–Ω–∏–º–∞—é—â–∏—Ö—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
    """)
    text_2 = dedent("""
        <b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç:</b>

        –∑–∞—Ä–∞–Ω–µ–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ñ–∞–π–ª —Å —Ç–µ–º–æ–π –≤—Å—Ç—Ä–µ—á–∏, —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é / –≤–∏–¥–µ–æ

        Quizlet —Å –ø–æ–ª–µ–∑–Ω–æ–π –ª–µ–∫—Å–∏–∫–æ–π –ø–æ —Ç–µ–º–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

        –∫–æ –≤—Å—Ç—Ä–µ—á–µ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å (–ø–æ—Å–º–æ—Ç—Ä–µ–ª / –ø–æ—á–∏—Ç–∞–ª –æ–± —ç—Ç–æ–º) –∏ –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å (–∏–∑—É—á–∏–ª –ª–µ–∫—Å–∏–∫—É –∏–∑ Quizlet)

        –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ —Ç—ã –º–Ω–æ–≥–æ –æ–±—â–∞–µ—à—å—Å—è –≤ –ø–∞—Ä–µ —Å peers, —É—á–∏—Ç–µ–ª–µ–º, –ø–æ–ª—É—á–∞–µ—à—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, –ø—Ä–æ–∫–∞—á–∏–≤–∞–µ—à—å –Ω–∞–≤—ã–∫s peaking –ø–æ –ø–æ–ª–Ω–æ–π
    """)
    text_3 = dedent("""
        <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>

        üîòHigh Inter / Upper-Inter
        –°–†, 19:00 –ø–æ –º—Å–∫

        üîòAdvanced
        –ß–¢, 19:00 –ø–æ –º—Å–∫
    """)
    text_4 = "<b>–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å</b>"
    keyboard = [
        [InlineKeyboardButton('High Inter / Upper', callback_data='upper')],
        [InlineKeyboardButton('Advanced', callback_data='advanced')],
        [InlineKeyboardButton('–ú–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ', callback_data='lower')],
        [InlineKeyboardButton('–ù–µ –∑–Ω–∞—é —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å',
                              callback_data='dont_know')],
    ]
    await context.bot.send_message(
        chat_id,
        text=text_1,
        parse_mode='HTML',
    )
    await sleep(3)
    await context.bot.send_message(
        chat_id,
        text=text_2,
        parse_mode='HTML',
    )
    await sleep(3)
    await context.bot.send_message(
        chat_id,
        text=text_3,
        parse_mode='HTML',
    )
    await sleep(3)
    await context.bot.send_message(
        chat_id,
        text=text_4,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML',
    )
    return 'SPEAK_CLUB_LEVEL_CHOICE'


async def handle_speak_club_level_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return 'SPEAK_CLUB_LEVEL_CHOICE'
    if update.callback_query.data == 'upper':
        return  # TODO –°–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É
    elif update.callback_query.data == 'advanced':
        return  # TODO –°–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É
    elif update.callback_query.data == 'lower':
        return await speak_club_lower(update, context)
    else:
        return await level_test(update, context)


async def speak_club_lower(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = dedent("""
        ‚ú® –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ intermediate, \
        –Ω–æ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–µ–ª–∏ –±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö –∫–ª—É–±–∞—Ö –∏ –Ω–∞–ø–∏—à–µ–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—è–≤–∏—Ç—Å—è

        –ê –ø–æ–∫–∞, —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è —Å–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é 500—Ä—É–± / –∑–∞–Ω—è—Ç–∏–µ?
    """)
    keyboard = [
        [InlineKeyboardButton('–î–∞', callback_data='yes')],
        [InlineKeyboardButton('–ù–µ—Ç', callback_data='No')]
    ]
    await context.bot.send_message(
        chat_id,
        text=template.render(Context({'username': username})),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML',
    )
    await context.bot.delete_message(
        chat_id=chat_id,
        message_id=update.effective_message.message_id
    )
    return 'LOWER_LEVEL_CHOICE'


async def handle_lower_level_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return 'LOWER_LEVEL_CHOICE'
    if update.callback_query.data == 'yes':
        return await group_club_start(update, context)
    chat_id = update.effective_chat.id
    text = dedent("""
        ‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –Ω–∞—à–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É

        –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 
        –î–æ —Å–∫–æ—Ä–æ–≥–æ üòâ
    """)
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode='HTML',
    )
    await context.bot.delete_message(
        chat_id=chat_id,
        message_id=update.effective_message.message_id
    )
    return 'START'


async def level_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = dedent("""
        –ú—ã –ø–æ–º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å üòâ

        –ü—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ –±–æ—Ç–µ, –ø—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π 2-4 –º–∏–Ω—É—Ç—ã —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:

        üî∏ Tell shortly about your last trip wherever you went to: who did you go with? \
                  where to? what did you do there? how did you like it? would you like to go there again?

        üî∏ What do you tend to do when you have some free time? How long have you been doing that? 

        ‚ùó–í–∞–∂–Ω–æ: –Ω–µ –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. \
                  –ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–∞–º –∏ –≤–∞—à–∏–º peers –±—É–¥—É –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ, \
                  –Ω–∞–º –≤–∞–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∏–º–µ–Ω–Ω–æ –≤–∞—à—É —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é —Ä–µ—á—å
    """)
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode='HTML',
    )
    await context.bot.delete_message(
        chat_id=chat_id,
        message_id=update.effective_message.message_id
    )
    return 'AWAIT_VOICE'


async def handle_voice_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # TODO –°–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É voice_test
    return


async def group_club_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text_1 = dedent("""
        ‚≠ê <b>–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è</b> –ø–æ–º–æ–≥—É—Ç:

        üí°–Ω–∞–±—Ä–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        üí°—Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ –ø–æ–ª–æ—á–∫–∞–º —Ç–æ, —á—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å
        üí°–≤—ã—É—á–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã —Å–≤–æ–±–æ–¥–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å –º—ã—Å–ª–∏
        üí°–ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å —è–∑—ã–∫–æ–≤–æ–π –±–∞—Ä—å–µ—Ä, –æ–±—â–∞—è—Å—å —Å peers –≤ –≥—Ä—É–ø–ø–µ

        <b>–§–æ—Ä–º–∞—Ç –∏ —Ü–µ–Ω–∞:</b>
        –∑–∞–Ω—è—Ç–∏—è –≤ Zoom –ø–æ 60–º–∏–Ω 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é
        –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è 500—Ä—É–±, –æ–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
        –¥–æ 6 —á–µ–ª–æ–≤–µ–∫
    """)
    text_2 = dedent("""
        <b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥—è—Ç:</b>

        –∫—É—Ä—Å English File –æ—Ç Oxford –∫–∞–∫ –æ—Å–Ω–æ–≤–∞
        –¥–æ–ø. –º–∞—Ç–µ—Ä–∏–∞–ª—ã - YouTube –≤–∏–¥–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ
        –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        –≤—ã–≤–æ–¥ –≤ —Ä–µ—á—å –≤—Å–µ–≥–æ –Ω–æ–≤–æ–≥–æ
        –º–Ω–æ–≥–æ speaking –≤ –ø–∞—Ä–∞—Ö
        —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ revisions
    """)
    text_3 = dedent("""
        <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>

        üîò Pre-Intermediate

        üîò Intermediate

        ‚ùó–ï—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –∞–Ω–∫–µ—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏ —Å–æ–æ–±—â–∏–º, –æ–Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞–±–æ—Ä –≤ –≥—Ä—É–ø–ø—É –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è

        ü§© <b>–†–ê–ó–ì–û–í–û–†–ù–´–ô –ö–õ–£–ë</b> ü§©
                            —Å @dasha.speaky

        üçÅ <b>–ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ç–µ–º—ã —Å–µ–Ω—Ç—è–±—Ä—è:</b>
        Board games - needed vocabulary
        How fake news spread
        Are emojis making us dumber?
        How to buy happiness
    """)
    keyboard = [
        [InlineKeyboardButton('–ê–Ω–∫–µ—Ç–∞', url='http://example.com')]
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text=text_1,
        parse_mode='HTML',
    )
    await sleep(3)
    await context.bot.send_message(
        chat_id=chat_id,
        text=text_2,
        parse_mode='HTML',
    )
    await sleep(3)
    await context.bot.send_message(
        chat_id=chat_id,
        text=text_3,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return 'START'


async def personal_lessons_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = dedent("""
        ‚≠ê<b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</b> –ø–æ–º–æ–≥—É—Ç:

        üí°–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        üí°–±—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã—Ç—å —É–∑–∫–∏–π –∑–∞–ø—Ä–æ—Å: –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é / —ç–∫–∑–∞–º–µ–Ω—É / –ø–µ—Ä–µ–µ–∑–¥—É –∏ —Ç–ø
        üí°–∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω–æ–π –¥–ª—è –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –Ω—É–∂–¥ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

        <b>–§–æ—Ä–º–∞—Ç –∏ —Ü–µ–Ω–∞:</b>
        –∑–∞–Ω—è—Ç–∏—è –≤ Zoom 60–º–∏–Ω —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã 
        –≤–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        –æ–±—ä–µ–º –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç—Ç –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
        —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 1500—Ä—É–±/–∑–∞–Ω—è—Ç–∏–µ, –æ–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü
    """)
    # TODO –ü—Ä–æ–¥—É–º–∞—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    keyboard = [
        [InlineKeyboardButton('–ê–Ω–∫–µ—Ç–∞', url='http://example.com')]
    ]
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return 'START'


async def user_input_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user_reply = update.message.text
    elif update.callback_query.data:
        user_reply = update.callback_query.data
    else:
        return
    if user_reply == '/start':
        user_state = 'START'
    else:
        user_state = context.user_data.get('state', 'START')
    states_function = {
        'START': start,
        'WELCOME_CHOICE': handle_welcome_choice,
        'SPEAK_CLUB_LEVEL_CHOICE': handle_speak_club_level_choice,
        'LOWER_LEVEL_CHOICE': handle_lower_level_choice,
        'AWAIT_VOICE': handle_voice_test,
    }

    state_handler = states_function[user_state]
    next_state = await state_handler(update, context)
    context.user_data['state'] = next_state


def main():
    # telegram_handler = TelegramLogsHandler(settings.ADMIN_TG_BOT, settings.ADMIN_TG_CHAT)
    # telegram_handler.setLevel(logging.WARNING)
    # logger.addHandler(telegram_handler)
    stream_handler = logging.StreamHandler()
    stream_handler.setLevel(settings.LOG_LEVEL)
    # stream_handler.setLevel(logging.DEBUG)
    logger.addHandler(stream_handler)

    application = ApplicationBuilder().token(settings.TELEGRAM_TOKEN).build()

    application.add_handler(CallbackQueryHandler(user_input_handler))
    application.add_handler(MessageHandler(filters.TEXT, user_input_handler))
    application.add_handler(CommandHandler('start', user_input_handler))
    try:
        if settings.BOT_MODE == 'webhook':
            logger.warning('Bot started in WEBHOOK mode')
            application.run_webhook(
                listen="0.0.0.0",
                port=5000,
                url_path=settings.TELEGRAM_TOKEN,
                webhook_url=f"{settings.WEBHOOK_URL}{settings.TELEGRAM_TOKEN}"
            )
        else:
            logger.warning('Bot started in POLLING mode')
            application.run_polling()
    except Exception:
        import traceback
        logger.warning(traceback.format_exc())
